[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "genealogy-extractor"
version = "0.1.0"
description = "AI-powered genealogy digitization application"
readme = "README.md"
requires-python = ">=3.12"

[tool.ruff]
# Target Python 3.12
target-version = "py312"

# Same as Black's line length
line-length = 88

# Files to exclude from linting
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",  # Exclude Django migrations
]

[tool.ruff.lint]
# Enable specific rule categories
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "S",   # flake8-bandit (security)
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "DJ",  # flake8-django
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # Pylint
    "TRY", # tryceratops
    "NPY", # NumPy-specific rules
    "RUF", # Ruff-specific rules
]

# Ignore specific rules that might be too strict for Django projects
ignore = [
    "S101",    # Use of assert
    "S105",    # Possible hardcoded password
    "S106",    # Possible hardcoded password
    "S107",    # Possible hardcoded password
    "S603",    # subprocess call: check for execution of untrusted input
    "S607",    # Starting a process with a partial executable path
    "DJ001",   # Avoid using null=True on string-based fields
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "PGH003",  # Use specific rule codes when ignoring type issues
    "TRY003",  # Avoid specifying long messages outside the exception class
    "EM101",   # Exception must not use a string literal
    "EM102",   # Exception must not use an f-string literal
    "T201",    # Allow print statements (for scripts)
    "RUF012",  # Mutable class attributes (Django admin config)
    "PTH122",  # os.path.splitext (can be Path.suffix but os.path is fine)
    "SLF001",  # Private member accessed (Django _meta is common)
    "F841",    # Local variable assigned but never used (task variables)
    "PT009",   # Use regular assert (prefer unittest assertions in tests)
    "E722",    # Bare except (allowed in specific cases)
    "G004",    # Logging statement uses f-string (allow for readability)
    "TRY401",  # Redundant exception object in logging.exception (informative)
    "TRY300",  # Consider moving statement to else block (sometimes clearer as-is)
    "TRY301",  # Abstract raise to inner function (sometimes clearer inline)
    "PTH110",  # os.path.exists should be Path.exists (os.path is fine)
    "PTH123",  # open() should be Path.open() (open() is fine)
    "G201",    # Use logging.exception instead of .error(exc_info=True)
    "SIM105",  # Use contextlib.suppress instead of try-except-pass
    "PT027"    # Use pytest.raises instead of unittest.TestCase.assertRaises (we use Django unittest)
]

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values and long lines
"**/tests/**/*.py" = ["PLR2004", "S101"]
# Settings files can have long lines and magic values
"**/settings.py" = ["PLR2004", "E501"]
# Admin files can have long lines
"**/admin.py" = ["E501"]
# Scripts can use print statements
"test-*.py" = ["T201"]
"scripts/*.py" = ["T201"]

[tool.ruff.lint.isort]
# Django-specific import sorting
known-first-party = ["genealogy", "genealogy_extractor"]
section-order = ["future", "standard-library", "django", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.isort.sections]
"django" = ["django"]

[tool.ruff.lint.flake8-quotes]
# Use double quotes for strings
inline-quotes = "double"

[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start lenient, tighten over time
disallow_incomplete_defs = false
strict_optional = true

# Django-specific settings
plugins = ["mypy_django_plugin.main"]

[[tool.mypy.overrides]]
module = "*.migrations.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "*.tests.*"
disallow_untyped_defs = false

[tool.django-stubs]
django_settings_module = "genealogy_extractor.settings"
